프로그래밍 기초
- 프로그래밍이란 ?
  > C, C++, JAVA , PYTHON...
  > 영문(인간) -> 컴파일러 -> 기계어 -> CPU ->실행 -> 결과물

-코딩 공부 방법
 > 반드시 디버깅해 볼것 : 의도에 맞게 프로그램이 실행되는지 확인
 > 알고리즘, 자료구조 공부 -> 코딩 테스트 필수(효율적인 프로그램작성)
 > 다른 사람의 소스코드 참조 : github, 오픈소스
 > 주석 : 코드의 이해 증가
 > 자기가 만들고 싶은 프로그램을 정확하게 정의하는 것이 중요 : 단위로 나누어서 정의
 
-좋은 프로그램이란
 > 코드의 가독성
 > 코드의 길이 : 불필요한 변수, 문장 등 -> 가독성과 연관
 > 변수의 이름 : 의미있는 이름 사용
 > 중복 코드 줄이기 -> 효율성, 가독성과 관련 -> 공간복잡도, 시간복잡도 고려 

TIOBE -> 프로그래밍 언어 순위 

파이썬을 배우는 이유
-python using sites 

활용 분야 
> 인공지능
> 업무자동화
> 데이터 분석, 머신러닝. -> 오픈소스의 강력함으로 가능
> 사물인터넷 (IOT)
> 얼굴 인식
> 웹크롤링
> GUI 프로그래밍 : pyQT
> 게임 개발 등
> 웹 프로그래밍 : flask, Django        

python의 print 사용법
> separator 사용
> end 사용
> python format 사용 

ckarh : Escape 코드
> \n : 개행 (줄바꿈)
> \t : 탭 
> \\ : 문자 
> \' : 문자 
> \" : 문자
> \1000  :null

출력예제
print("python start!")
print('python start!')
print("""python start!""")
print('''python start!''')
print('P','Y','T','H','O','N', sep = "")
print('010','7777','7777',sep ='@')
print('010','7777','7777',sep ='@')
print()

파이썬은 정수 정수 계산을 하여도 산수 (실수, 정수) 값에 따라 나온다. 

,(콤마) 사이에 넣을려면 >> sep = ' '
import sys 
print('learn Python', file = sys.stdout)
>> learn Python

원래 데이터가 정수면 정수가 나오고
원래 데이터가 실수면 실수가 나오게 된다 

8진수 : 표시 0o
16진수 : 123456789ABCDE... A(10) B(11)....표시 : 0x  , -가 들어가면 분수로 분모자리로 들어가게 된다

변수와 함수 소개
-프로그래밍 작업을 할 때 기본적으로 변수와 함수 필요
변수
-여러가지 값으로 변할 수 있는 수
-변수명
 >대소문자를 구분하는 언어 => Freind / freind 가 다르다
 >코딩을 할 때 대소문자가 일치하는지 확인 필요 
프로그램을 작성하면서 변수에는 임의의 값을 담거나 함수가 리턴하는 값을 저장
파이썬은 형식을 미리 선언해서 사용하는 정적인 언어가 아니기 때문에 선언 없이 변수의 값을 담아서 바로 사용(type로 형식 확인할 수 있음 )
문자열,정수,실수 등을 바로 초기화 해서 사용 

함수
종류
- 필요한 기능이 미리 구현되어 있는 빌트인 함수
- 사용자가 직접 정의한 함수
API
len()이라는 내장 함수는 입력 파레메터의 값의 길이를 확인 할 수 있다.

키워드
-파이썬언어에서 제공되는 기본적인 문장
-미리 정의되어 있는 단어
-변수명이나 함 수명으로 사용 불가
-파이썬의 키워드는 대략 35개 정도 

자료형식
>숫자형
>문자형
>리스트 [ ]  //집합으로 내용 변경 가능 
>튜플 ( )  //내용 변경이 되지 않는다. 
>사전 {키 : 값 , 키 : 값 }  //사전애 단어나오고 뜻 나오는걸로 생각 
>세트 { }  //값의 집합 형태, 합집합 교집합 차집합을 구할 경우 

변수와 함수 소개
어떤 경우에 리스트를 사용하고 딕셔너리를 사용하는가
아직은 처음 나오는 형식들이여서 용도가 궁금할 수 있다
파이썬에서는 다중의 데이터를 저장해서 사용하는 경우가 많기 때문에 리스트형식을 많이 사용법입력한 순서대로 출력하는 경우라면 당연히 리스트를 사용하는 것이 편리 
키를 통한 검색이 필요할 경우 딕셔너리 사전을 사용해야 한다.

문자열
- 문자열을 결합할 때 더하기 연산자는 생략 가능
- *을 통해 반복 가능 

문자열
문자열 인덱싱
-문자열에서 원하는 자리의 문자를 가져옴

문자열 슬라이싱
-문자열에서 원하는 부분을 잘라서 가져옴
-뒤쪽에서 카운터를 시작하면 -1부터 시작
-0부터 시작하고 끝부분에서는 자기 번호 제외 -1 

문자열 인덱싱과 슬라이싱 

리스트 : 값의 배열 ["",""]
>데이터를 모아 놓은 목록
>순서가 존재하며 여러가지 자료형을 담을 수 있다
>다른 프로그래밍 언어의 배열 대신 사용 

append () 메서드
>기존 리스트에 값을 추가 
insert() 메서드
>원하는 위치에 추가

index() 메서드
> 어떤 값이 어디에 있는지 확인
> 2번째 인자를 지정하지 않으면 처음부터 검색을 하고,
지정을 하면 지정된 방 번호 이후의 아이템의 방 번호 리턴 

count()메서드
>현재 해당 값의 개수를 반환
pop() 메서드
>값을 뽑아내서 반환 
>무조건 마지막부터 뽑아내는 것 
 
 스텍 : FIFO 마지막으로 들어간 것이 첫번째로 나온다
 큐 : LIFO 첫번째로 들어간 것이 첫번째로 나온다


remove() 메서드
>단순히 해당 값을 삭제
extend() 메서드
>데이터 추가 

sort() 메서드
>오름차순 정렬
reverse() 메서드
>내림차순 정렬 

튜플 ( )
리스트와 유사 : 순서가 존재
리스트와는 달리 [] 대신 ( )로 묶어서 표현하며 읽기 전용이다
제공되는 함수는 리스트에 비해 적지만 그만큼 속도가 빠르다
튜플은 일반적인 경우에 데이터를 묶어서 한 번에 전달하거나 여러 개의 값을 묵어서 한 번에 반환할 경우에 사용
자동 완성 기능을 통해서 실제 제공되는 메서드가 count() index()정도만 제공되는 것을 볼 수 있다.  
튜플이 주로 사용되는 경우 
  >함수에서 이상의 값을 리턴 하는 경우 
문자열 포맷팅
튜플에 있는 값을 함수 인수로 사용하는 경우

세트 - union(), intersection(), differece() {값,값....}
> 수학 시간에 배운 집합과 동일 
  >유일한 값의 모임이며 순서는 없다
  union() 합집합
  intersection() 교집합 
  differece()는 차집합

리스트, 세트, 튜플은 다음과 같이 생성자 list(), set(),tuple()을 이용해서 서로 변환 가능 


딕셔너리 DICTIONARY
>사전 {키 : 값 }
>키: 값 ex) d = dict(a = 1, b = 2, c =3 )

bool
수치를 논리연산자에 사용하는 경우 
> 0은 False로 간주
> 음수를 포함한 다른 값은 모두 True로 간주
>문자열을 논리연산자에 사용하는 경우에도 "만 False로 간주
>값이 없는 상태를 나타내는 None도 False로 간주 

mutable, immutable 객체
> mutable : 변경되는 객체(객체의 상태를 변경할 수 있음)
  > 종류 : list, float, str, bool, tuple
  > 값을 추가하거나 바꾸어도 주소값이 변경되지 않음 
>얇은 복사, 깊은 복사를 이해하기 위해서 필요
>id는 주소를 보여주기 위해서

>immutabel : 자바의 문자열상수 생성자와 비슷함  
  >내가 만약  90일때 90을 가르키는 모든 것들이 같은 90을 가르킨다.

얖은 복사
>주소가 복사되어 객체를 공유하는 얕은 복사
> 완벽하게 같은 것 ( = )
>전체 리스트의 주소는 다르지만 내부적으로 같은 것 (: , .copy, copy.copy)

얕은 복사
1. = 주소동일
2. [:] 주소 다름/ 내부 주소 동일
3. .copy
4. copy.copy()

깊은 복사


">>" 2진수만큼 곱해지는 것 : >> 2이면 2의 2진수로 4배가 곱해지는 것이다. 
"<<" 2진수만큼 나눠지는 것 : 

분기 구문
1. 들여쓰기에 대한 규칙
> 특별한 이유가 없다면 가장 바깥쪽에 있는 블록의 코드는 반드시 1열부터 시작해야 한다.
> 내부 블록은 같은 거리만큼 들여쓰기를 한다.
> 블록의 끝은 들여쓰기가 끝나는 부분으로 간주된다, ( {,} , begin, end를 사용하지 않는다.)
> 탭과 공백은 섞어서 쓰지 않는 것이 좋다. 일반적으로 공백은 2 ~ 4 칸을 사용한다.

조건식의 참과 거짓 판단
1. 거짓
정수 계열의 0
실수 계열의 0.0
시퀀스 계열의 (),{},[]
""
None
2. 참
0이 아니면
빈 문자열이 아니면
빈 객체가 아니면 

기본적인 for문
> 이터레이션이 가능한 객체를 순차적으로 순회
> 데이터를 모아 놓은 자료형에서 각 요소를 꺼내어 반복하는 형식으로 구현 
> 형식 
for <target> in <object>:
        문장1
else:
        문장2

<object>
range()함수 문자열 튜플 딕셔너리 셋 

break문, continue문
> 반복문을 수행하면서 break문과 continue문을 이용해서 반복문을 제어할 수 있다.

>break문

리스트 함축
> 리스트 내포, 리스트 내장 또는 리스트 함축으로 표기
> 리스트 안에 for문이나 if문을 사용하여 리스트를 생성하는 문법

함수
> 수정할 때 편리하다
> 코드를 반복해서 사용하지 않아도 된다.
> 연관성이 있는 코드를 묶어 놓는 것
> 대게 여러 번 사용할 것을 고려하여 만든 코드 조각
> 실제 코드를 모아서 이름을 붙여놓고 그 이름을 호출하는 식으로 사용